// <auto-generated />
using System.Collections.Generic;
using ParsMedeQ.Infrastructure.Persistance.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ParsMedeQ.Infrastructure.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Entities.ProductCategoryLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategoryLink", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Entities.ProductVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VariationType")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "ParsMedeQ.Domain.Aggregates.ProductAggregate.Entities.ProductVariation.Price#MoneyInfo", b1 =>
                        {
                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("Varchar(3)")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(22,4)")
                                .HasColumnName("Price");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariation", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("Slug");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("Slug");

                    b.ToTable("ProductBrand", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("Slug");

                    b.ToTable("ProductModel", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JsonSchema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.PrimitiveCollection<string>("Variations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.UserAggregate.UserEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<int>("RegistrantId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "ParsMedeQ.Domain.Aggregates.UserAggregate.UserEntity.User.FullName#FullNameType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "ParsMedeQ.Domain.Aggregates.UserAggregate.UserEntity.User.Password#PasswordType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(2500)
                                .IsUnicode(false)
                                .HasColumnType("varchar(2500)")
                                .HasColumnName("Salt");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2500)
                                .IsUnicode(false)
                                .HasColumnType("varchar(2500)")
                                .HasColumnName("Password");
                        });

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Entities.ProductCategoryLink", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", "ProductCategory")
                        .WithMany("ProductLinks")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("CategoryLinks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Entities.ProductVariation", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductModel", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", null)
                        .WithMany("Categories")
                        .HasForeignKey("ProductId");

                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductBrand", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany("Brands")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductModel", b =>
                {
                    b.HasOne("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductBrand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CategoryLinks");

                    b.Navigation("Variations");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductLinks");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductBrand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.Entities.ProductModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ParsMedeQ.Domain.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Navigation("Brands");
                });
#pragma warning restore 612, 618
        }
    }
}
